{"version":3,"file":"static/webpack/static/development/pages/index.js.7d7b79d57a06f4fbf0cd.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {\n  useState,\n  useRef,\n  createRef,\n  useEffect,\n  useReducer,\n} from 'react'\nimport Head from 'next/head'\nimport { base, base2, layoutText } from '../components/constants'\nimport Topstrip from '../components/topstrip'\nimport Bottomstrip from '../components/bottomstrip'\nimport Titlebutton from '../components/titlebutton'\n\nlet bcw = 8\nlet bch = 16\n\nlet hotkey_labels = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('')\n\nfunction getLast(text, index) {\n  let char = text[index]\n  if (char === undefined) {\n    let last_char = text[index - 1]\n    // if at start\n    if (last_char === undefined) {\n      char = [null, 0, 0]\n    } else {\n      char = last_char.slice()\n      if (char[0] === '\\n') {\n        char[1] = 0\n        char[2] += 1\n      } else {\n        char[1] += 1\n      }\n    }\n  }\n  return char\n}\n\nfunction tReducer(state, action) {\n  function mc(newtext, mark) {\n    return mark.map(v => Math.min(Math.max(0, v), newtext.length))\n  }\n  switch (action.type) {\n    case 'insert': {\n      let newkey = action.payload\n      let text_string = state.text.map(o => o[0]).join('')\n      let firsti = Math.min(...state.marker)\n      let lasti = Math.max(...state.marker)\n      let new_string =\n        text_string.slice(0, Math.max(0, firsti)) +\n        newkey +\n        text_string.slice(lasti)\n      let text_layout = layoutText(action.col_num, new_string)\n      let new_marker = [firsti + newkey.length, firsti + newkey.length]\n      return { text: text_layout, marker: mc(text_layout, new_marker) }\n    }\n    case 'backspace': {\n      let text_string = state.text.map(o => o[0]).join('')\n      let new_string, new_marker\n      if (state.marker[0] === state.marker[1]) {\n        new_string =\n          text_string.slice(0, Math.max(0, state.marker[0] - 1)) +\n          text_string.slice(state.marker[0])\n        new_marker = [state.marker[0] - 1, state.marker[0] - 1]\n      } else {\n        let firsti = Math.min(...state.marker)\n        let lasti = Math.max(...state.marker)\n        new_string =\n          text_string.slice(0, Math.max(0, firsti)) + text_string.slice(lasti)\n        new_marker = [firsti, firsti]\n      }\n      let text_layout = layoutText(action.col_num, new_string)\n      return { text: text_layout, marker: mc(text_layout, new_marker) }\n    }\n    case 'highlight': {\n      let new_marker = state.marker\n      if (action.payload[0] != 0) {\n        new_marker = [state.marker[0], state.marker[1] + action.payload[0]]\n      }\n      if (action.payload[1] != 0) {\n        let firsti = state.marker[1]\n        let pos = getLast(state.text, firsti)\n        if (action.payload[1] < 0) {\n          if (pos[2] > 0) {\n            let row_up = state.text.filter(o => o[2] === pos[2] - 1)\n            let cc = row_up[pos[1]]\n            if (cc === undefined) cc = row_up[row_up.length - 1]\n            new_marker = [state.marker[0], cc[3]]\n          }\n        } else if (action.payload[1] > 0) {\n          if (pos[2] < state.text[state.text.length - 1][2]) {\n            let row_down = state.text.filter(o => o[2] === pos[2] + 1)\n            let cc = row_down[pos[1]]\n            if (cc === undefined) {\n              cc = row_down[row_down.length - 1]\n              if (cc[3] === state.text.length - 1) {\n                cc[3] += 1\n              }\n            }\n            new_marker = [state.marker[0], cc[3]]\n          }\n        }\n      }\n\n      return { text: state.text, marker: mc(state.text, new_marker) }\n    }\n    case 'set_marker': {\n      return { text: state.text, marker: mc(state.text, action.payload) }\n    }\n    case 'set_end_marker': {\n      return {\n        text: state.text,\n        marker: mc(state.text, [state.marker[0], action.payload]),\n      }\n    }\n    case 'layout': {\n      let text_layout = layoutText(\n        action.col_num,\n        state.text.map(o => o[0]).join('')\n      )\n      return { text: text_layout, marker: mc(text_layout, state.marker) }\n    }\n    case 'move_marker':\n      {\n        let new_marker = state.marker\n        if (action.payload[0] != 0) {\n          new_marker = [\n            state.marker[0] + action.payload[0],\n            state.marker[0] + action.payload[0],\n          ]\n        }\n        if (action.payload[1] != 0) {\n          let firsti = Math.min(...state.marker)\n          let pos = getLast(state.text, firsti)\n          if (action.payload[1] < 0) {\n            if (pos[2] > 0) {\n              let row_up = state.text.filter(o => o[2] === pos[2] - 1)\n              let cc = row_up[pos[1]]\n              if (cc === undefined) cc = row_up[row_up.length - 1]\n              new_marker = [cc[3], cc[3]]\n            }\n          } else if (action.payload[1] > 0) {\n            if (pos[2] < state.text[state.text.length - 1][2]) {\n              let row_down = state.text.filter(o => o[2] === pos[2] + 1)\n              let cc = row_down[pos[1]]\n              if (cc === undefined) {\n                cc = row_down[row_down.length - 1]\n                if (cc[3] === state.text.length - 1) {\n                  cc[3] += 1\n                }\n              }\n              new_marker = [cc[3], cc[3]]\n            }\n          }\n        }\n        return { text: state.text, marker: mc(state.text, new_marker) }\n      }\n      defaut: throw new Error()\n  }\n}\n\nlet short_text = `CHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.`\n\nshort_text = `You see people, and you're disconnected from them, they mean nothing to you, but other times you can invest everything in someone you don't even know, silently believe in them, it might be on the underground or in a shop or something. You hope people are doing that with you as well. Some people, even when they're quite young, and they're in difficulty, maybe taking a battering in their life, but they still handle themselves with grace. I hope most people can be like that, hold it together, I wanted this album to be for people in that situation.`\n\nshort_text = `Face lets you edit both the text and the font it is rendered in. In text mode you can type and edit text normally. Press escape to enter font mode, where you can select a character to edit. Any changes to a character are visible immediately.\n\nAdditional controls are shown at the bottom. You can change the text area and save it as an image in text mode. In font mode, you can save the font, load a font (fonts are just a sprite sheet image), or choose a font from the font gallery.\n\nThe base font used is a subset of GNU Unifont.`\n\nlet initialt = {\n  text: layoutText(20, short_text),\n  marker: [short_text.length, short_text.length],\n}\n\nlet acel_num = 95\nlet acols = 12\nlet arows = Math.ceil(acel_num / acols)\n\nlet magnify = 8\n\nconst Home = () => {\n  let [mode, setMode] = useState('text')\n\n  let mref = useRef(null)\n  let tref = useRef(null)\n\n  let aref = useRef(null)\n  let amref = useRef(null)\n\n  let cref = useRef(null)\n  let cmref = useRef(null)\n\n  let [canvas_loaded, setCanvasLoaded] = useState(false)\n  let [ui_loaded, setUILoaded] = useState(false)\n\n  let [scale, setScale] = useState(2)\n  let [cw, setCw] = useState(8 * 2)\n  let [ch, setCh] = useState(16 * 2)\n  let [col_num, setColNum] = useState(20)\n  let [row_num, setRowNum] = useState(14)\n\n  let [amark, setAmark] = useState(0)\n\n  let [cmark, setCmark] = useState([0, 0])\n\n  let base_ref = useRef(null)\n  let ui_ref = useRef(null)\n  let km_ref = useRef({})\n\n  let flref = useRef(null)\n  let clref = useRef(null)\n  let tlref = useRef(null)\n\n  let [textClicked, setTextClicked] = useState(false)\n\n  let [tstate, tdispatch] = useReducer(tReducer, initialt)\n\n  let [refresh, setRefresh] = useState(0)\n\n  let [highlight, setHighlight] = useState(true)\n\n  let [loaded, setLoaded] = useState(base2)\n\n  let [gallery_data, setGalleryData] = useState(null)\n  let [show_gallery, setShowGallery] = useState(false)\n\n  useEffect(() => {\n    fetch('/library.json')\n      .then(data => data.json())\n      .then(json => {\n        setGalleryData(json)\n      })\n  }, [])\n\n  function loadImage(src) {\n    let base = base_ref.current\n    let basex = base.getContext('2d')\n    let base_img = document.createElement('img')\n    base_img.onload = () => {\n      basex.clearRect(0, 0, base.width, base.height)\n      basex.fillStyle = 'white'\n      basex.fillRect(0, 0, base.width, base.height)\n      basex.drawImage(base_img, 0, 0, base.width, base.height)\n      drawAlphabet()\n      drawText()\n      drawChar()\n    }\n    base_img.src = src\n    setLoaded(src)\n  }\n\n  function setSizes() {\n    // text\n    let t = tref.current\n    t.width = cw * (col_num + 2)\n    t.height = ch * (row_num + 1)\n\n    // text marker\n    let m = mref.current\n    m.width = cw * (col_num + 3)\n    m.height = ch * (row_num + 1)\n\n    // alphabet\n    let a = aref.current\n    a.width = cw * acols\n    a.height = ch * arows\n\n    // alphabet marker\n    let am = amref.current\n    am.width = cw * acols\n    am.height = ch * arows\n\n    // character\n    let c = cref.current\n    c.width = cw * magnify\n    c.height = ch * magnify\n\n    // character marker\n    let cm = cmref.current\n    cm.width = c.width\n    cm.height = c.height\n  }\n\n  // init\n  useEffect(() => {\n    if (\n      (cw === 8 && ch === 16 && scale === 1) ||\n      (cw === 16 && ch === 32 && scale === 2)\n    ) {\n      setSizes()\n\n      let $base = document.createElement('canvas')\n      $base.width = acols * (cw / scale)\n      $base.height = arows * (ch / scale)\n      let $basex = $base.getContext('2d')\n      $basex.imageSmoothingEnabled = false\n      let base_img = document.createElement('img')\n      base_img.onload = () => {\n        $basex.fillStyle = 'white'\n        $basex.fillRect(0, 0, $base.width, $base.height)\n        $basex.drawImage(base_img, 0, 0, $base.width, $base.height)\n        base_ref.current = $base\n\n        setCanvasLoaded(true)\n      }\n      base_img.src = loaded\n\n      let ui_img = document.createElement('img')\n      ui_img.onload = () => {\n        let $ui = document.createElement('canvas')\n        $ui.width = (acols * cw) / scale\n        $ui.height = (arows * ch) / scale\n        let $uix = $ui.getContext('2d')\n        $uix.imageSmoothingEnabled = false\n        $uix.drawImage(ui_img, 0, 0, $ui.width, $ui.height)\n        ui_ref.current = $ui\n\n        setUILoaded(true)\n      }\n      ui_img.src = base2\n    }\n  }, [])\n\n  useEffect(() => {\n    if (canvas_loaded) {\n      setSizes()\n      drawMarker()\n      drawText()\n      drawAlphabet()\n      drawAlphabetMarker()\n      drawChar()\n    }\n  }, [cw, ch, scale, canvas_loaded])\n\n  // init after canvas loaded\n  useEffect(() => {\n    if (canvas_loaded) {\n      drawMarker()\n      drawText()\n      drawAlphabet()\n      drawAlphabetMarker()\n      drawChar()\n    }\n  }, [canvas_loaded])\n\n  useEffect(() => {\n    if (canvas_loaded) {\n      drawMarker()\n      drawAlphabetMarker()\n    }\n  }, [mode, tstate.text, tstate.marker, amark, col_num, highlight])\n\n  useEffect(() => {\n    if (canvas_loaded) {\n      drawChar()\n    }\n  }, [mode, amark, cmark])\n\n  useEffect(() => {\n    if (canvas_loaded) {\n      drawText()\n    }\n  }, [tstate.text, col_num])\n\n  function drawAlphabetMarker() {\n    let am = amref.current\n    let amx = am.getContext('2d')\n\n    amx.clearRect(0, 0, am.width, am.height)\n\n    // amx.fillStyle = 'black'\n    // amx.fillRect(0, 0, am.width, am.height)\n\n    function getXY(i) {\n      return [i % acols, Math.floor(i / acols)]\n    }\n    let [x, y] = getXY(amark)\n    amx.fillStyle = '#fff'\n    amx.lineWidth = scale\n\n    let fl = flref.current\n    fl.width = 'font:-'.length * bcw\n    let flx = fl.getContext('2d')\n    let fl_content = 'font '\n    flx.globalCompositeOperation = 'source-over'\n    flx.fillStyle = '#efefef'\n    flx.fillRect(0, 0, fl.width, fl.height)\n    flx.globalCompositeOperation = 'darken'\n    for (let i = 0; i < fl_content.length; i++) {\n      let key = fl_content.charCodeAt(i) - 32\n      if (key === -22) key = 94\n      let [sprite_x, sprite_y] = getXY(key)\n      flx.drawImage(\n        ui_ref.current,\n        sprite_x * (cw / scale),\n        sprite_y * (ch / scale),\n        cw / scale,\n        ch / scale,\n        i * (cw / scale),\n        0 * (ch / scale),\n        cw / scale,\n        ch / scale\n      )\n    }\n\n    if (mode === 'font') {\n      amx.fillRect(x * cw, y * ch, cw, ch)\n      function getXY(i) {\n        return [i % acols, Math.floor(i / acols)]\n      }\n      let key = ':'.charCodeAt(0) - 32\n      let [sprite_x, sprite_y] = getXY(key)\n      flx.drawImage(\n        ui_ref.current,\n        sprite_x * bcw,\n        sprite_y * bch,\n        bcw,\n        bch,\n        (fl_content.length - 1) * bcw,\n        0 * bch,\n        bcw,\n        bch\n      )\n      flx.drawImage(\n        ui_ref.current,\n        x * bcw,\n        y * bch,\n        bcw,\n        bch,\n        fl_content.length * bcw,\n        0 * bch,\n        bcw,\n        bch\n      )\n    }\n  }\n\n  function drawAlphabet() {\n    let a = aref.current\n    let ax = a.getContext('2d')\n    ax.imageSmoothingEnabled = false\n\n    ax.clearRect(0, 0, a.width, a.height)\n    ax.drawImage(base_ref.current, 0, 0, a.width, a.height)\n  }\n\n  function drawChar() {\n    let cm = cmref.current\n    let cmx = cm.getContext('2d')\n\n    cmx.clearRect(0, 0, cm.width, cm.height)\n    if (mode === 'char') {\n      cmx.fillStyle = 'magenta'\n      cmx.fillRect(\n        cmark[0] * magnify,\n        cmark[1] * magnify,\n        magnify * scale,\n        magnify * scale\n      )\n    }\n\n    let c = cref.current\n    let cx = c.getContext('2d')\n\n    cx.fillStyle = 'white'\n    cx.fillRect(0, 0, c.width, c.height)\n    cx.imageSmoothingEnabled = false\n\n    function getXY(i) {\n      return [i % acols, Math.floor(i / acols)]\n    }\n    let [sprite_x, sprite_y] = getXY(amark)\n    cx.drawImage(\n      base_ref.current,\n      sprite_x * bcw,\n      sprite_y * bch,\n      bcw,\n      bch,\n      0,\n      0,\n      cw * magnify,\n      ch * magnify\n    )\n\n    function getXY(i) {\n      return [i % acols, Math.floor(i / acols)]\n    }\n    let cl = clref.current\n    cl.width = 'char:t'.length * bcw\n    let clx = cl.getContext('2d')\n    let cl_content = 'char '\n    clx.globalCompositeOperation = 'source-over'\n    clx.fillStyle = '#efefef'\n    clx.fillRect(0, 0, cl.width, cl.height)\n    clx.globalCompositeOperation = 'darken'\n    for (let i = 0; i < cl_content.length; i++) {\n      let key = cl_content.charCodeAt(i) - 32\n      if (key === -22) key = 94\n      let [sprite_x, sprite_y] = getXY(key)\n      clx.drawImage(\n        ui_ref.current,\n        sprite_x * (cw / scale),\n        sprite_y * (ch / scale),\n        cw / scale,\n        ch / scale,\n        i * (cw / scale),\n        0 * (ch / scale),\n        cw / scale,\n        ch / scale\n      )\n    }\n\n    if (mode === 'char') {\n      cx.strokeStyle = '#ddd'\n      for (let r = 0; r < ch; r += scale) {\n        for (let c = 0; c < cw; c += scale) {\n          cx.strokeRect(\n            c * magnify,\n            r * magnify,\n            magnify * scale,\n            magnify * scale\n          )\n        }\n      }\n\n      function getXY(i) {\n        return [i % acols, Math.floor(i / acols)]\n      }\n      let key = ':'.charCodeAt(0) - 32\n      let [a_x, a_y] = getXY(key)\n      clx.drawImage(\n        ui_ref.current,\n        a_x * bcw,\n        a_y * bch,\n        bcw,\n        bch,\n        (cl_content.length - 1) * bcw,\n        0 * bch,\n        bcw,\n        bch\n      )\n      clx.drawImage(\n        ui_ref.current,\n        sprite_x * bcw,\n        sprite_y * bch,\n        bcw,\n        bch,\n        cl_content.length * bcw,\n        0 * bch,\n        bcw,\n        bch\n      )\n    }\n  }\n\n  function drawMarker() {\n    let m = mref.current\n\n    let mx = m.getContext('2d')\n\n    let char = getLast(\n      tstate.text,\n      Math.max(...tstate.marker, tstate.text.length - 1)\n    )\n\n    m.width = cw * (col_num + 3)\n    m.height = char[2] * ch + ch + ch\n    mx.clearRect(0, 0, m.width, m.height)\n\n    if (mode != 'text' && highlight) {\n      for (let i = 0; i < tstate.text.length; i++) {\n        let char = tstate.text[i]\n        let akey\n        if (amark === 94) {\n          akey = String.fromCharCode(32 - 22)\n        } else {\n          akey = String.fromCharCode(amark + 32)\n        }\n        if (char[0] === akey) {\n          mx.fillStyle = '#222'\n          mx.fillRect(char[1] * cw + cw + cw / 2, char[2] * ch + ch / 2, cw, ch)\n        }\n      }\n    }\n\n    if (mode === 'text') {\n      function getXy(mark) {\n        let char = getLast(tstate.text, mark)\n        let x = char[1]\n        let y = char[2]\n        return [x, y]\n      }\n\n      if (tstate.marker[0] === tstate.marker[1]) {\n        // cursor\n        let [x, y] = getXy(tstate.marker[0])\n        mx.fillStyle = 'green'\n        mx.fillRect(\n          x * cw + cw + cw / 2 - scale,\n          y * ch + ch / 2,\n          scale * 2,\n          ch\n        )\n      } else {\n        // highlight\n        let firsti = Math.min(...tstate.marker)\n        let lasti = Math.max(...tstate.marker)\n        let [x0, y0] = getXy(firsti)\n        let [x1, y1] = getXy(lasti)\n        mx.fillStyle = 'green'\n        // same row\n        if (y0 === y1) {\n          mx.fillRect(\n            x0 * cw + cw + cw / 2,\n            y0 * ch + ch / 2,\n            (x1 - x0) * cw,\n            ch\n          )\n        } else {\n          // first_row\n          let frow = tstate.text.filter(o => o[2] === y0)\n          let last_frow = frow[frow.length - 1]\n          mx.fillRect(\n            x0 * cw + cw + cw / 2,\n            y0 * ch + ch / 2,\n            (last_frow[1] - x0 + 1) * cw,\n            ch\n          )\n\n          if (y1 - y0 > 1) {\n            for (let i = y0 + 1; i < y1; i++) {\n              let row = tstate.text.filter(o => o[2] === i)\n              mx.fillRect(\n                0 * cw + cw + cw / 2,\n                i * ch + ch / 2,\n                (row[row.length - 1][1] + 1) * cw,\n                ch\n              )\n            }\n          }\n\n          // last_row\n          let lrow = tstate.text.filter(o => o[2] === y1)\n          let last_lrow = lrow[lrow.length - 1]\n          mx.fillRect(0 * cw + cw + cw / 2, y1 * ch + ch / 2, x1 * cw, ch)\n        }\n      }\n    }\n  }\n\n  function drawText() {\n    let t = tref.current\n    let tx = t.getContext('2d')\n    let text = tstate.text\n\n    console.log(text)\n\n    let char = getLast(\n      tstate.text,\n      Math.max(Math.max(...tstate.marker), tstate.text.length)\n    )\n    t.width = cw * (col_num + 2)\n    t.height = char[2] * ch + ch + ch\n\n    // text label\n    function getXY(i) {\n      return [i % acols, Math.floor(i / acols)]\n    }\n    let tl = tlref.current\n    let tlx = tl.getContext('2d')\n    tlx.clearRect(0, 0, tl.width, tl.height)\n    tlx.globalCompositeOperation = 'source-over'\n    tlx.fillStyle = '#efefef'\n    tlx.fillRect(0, 0, tl.width, tl.height)\n    tlx.globalCompositeOperation = 'darken'\n    let tl_content = 'text:' + col_num + 'x' + (char[2] + 1)\n    for (let i = 0; i < tl_content.length; i++) {\n      let key = tl_content.charCodeAt(i) - 32\n      if (key === -22) key = 94\n      let [sprite_x, sprite_y] = getXY(key)\n      tlx.drawImage(\n        ui_ref.current,\n        sprite_x * (cw / scale),\n        sprite_y * (ch / scale),\n        cw / scale,\n        ch / scale,\n        i * (cw / scale),\n        0 * (ch / scale),\n        cw / scale,\n        ch / scale\n      )\n    }\n\n    tx.fillStyle = 'white'\n    tx.fillRect(0, 0, t.width, t.height)\n    tx.imageSmoothingEnabled = false\n\n    for (let i = 0; i < text.length; i++) {\n      let item = text[i]\n      let x = item[1]\n      let y = item[2]\n      let key = item[0].charCodeAt(0) - 32\n      if (key === -22) key = 94\n      let sprite_x = key % acols\n      let sprite_y = Math.floor(key / acols)\n      tx.drawImage(\n        base_ref.current,\n        sprite_x * bcw,\n        sprite_y * bch,\n        bcw,\n        bch,\n        x * cw + cw,\n        y * ch + ch / 2,\n        cw,\n        ch\n      )\n    }\n  }\n\n  function keyTrigger(keystring) {\n    let shift = false\n    let ctrl = false\n    let meta = false\n\n    if (keystring.indexOf('ctrl') > -1) {\n      ctrl = true\n      keystring = keystring.split('+')[1]\n    }\n\n    km_ref.current[keystring] = true\n    keyAction(keystring, {\n      shiftKey: shift,\n      ctrlKey: ctrl,\n      meta: meta,\n      preventDefault: function() {},\n    })\n    setTimeout(() => {\n      km_ref.current[keystring] = false\n    }, 0)\n  }\n\n  function keyAction(key, event) {\n    let km = km_ref.current\n\n    let shift = event.shiftKey\n    let ctrl = event.ctrlKey\n    let meta = event.metaKey\n\n    // show gallery overrides everything else\n    if (show_gallery) {\n      if (key === 'Escape') {\n        setShowGallery(prev => !prev)\n      } else {\n        for (let i = 0; i < hotkey_labels.length; i++) {\n          let check_key = hotkey_labels[i]\n          if (key === check_key) {\n            let src = gallery_data[hotkey_labels.indexOf(key)]\n            setShowGallery(false)\n            loadImage('/font-library/' + src)\n          }\n        }\n      }\n      return\n    }\n\n    // size change can be done in any mode\n    if (ctrl && key == 1) {\n      setScale(1)\n      setCw(8)\n      setCh(16)\n      event.preventDefault()\n    } else if (ctrl && key == 2) {\n      setScale(2)\n      setCw(16)\n      setCh(32)\n      event.preventDefault()\n    } else if (ctrl && key == 'v') {\n      location.href = 'https://github.com/constraint-systems/face'\n      event.preventDefault()\n    }\n\n    if (mode === 'text') {\n      if (ctrl && key === 'a') {\n        tdispatch({ type: 'set_marker', payload: [0, tstate.text.length] })\n      } else if (ctrl && key === 'h') {\n        let new_col = col_num - 1\n        setColNum(new_col)\n        tdispatch({ type: 'layout', col_num: new_col })\n        event.preventDefault()\n      } else if (ctrl && key === 'l') {\n        let new_col = col_num + 1\n        setColNum(new_col)\n        tdispatch({ type: 'layout', col_num: new_col })\n        event.preventDefault()\n      } else if (ctrl && key === 's') {\n        let link = document.createElement('a')\n\n        let t = tref.current\n        let temp = document.createElement('canvas')\n        temp.width = t.width\n        temp.height = t.height\n\n        let tempx = temp.getContext('2d')\n        tempx.fillStyle = 'white'\n        tempx.fillRect(0, 0, t.width, t.height)\n        tempx.drawImage(t, 0, 0)\n\n        temp.toBlob(function(blob) {\n          link.setAttribute(\n            'download',\n            'face-text-' +\n              new Date()\n                .toISOString()\n                .slice(0, -4)\n                .replace(/-/g, '')\n                .replace(/:/g, '')\n                .replace(/_/g, '')\n                .replace(/\\./g, '') +\n              'Z' +\n              '.png'\n          )\n\n          link.setAttribute('href', URL.createObjectURL(blob))\n          link.dispatchEvent(\n            new MouseEvent(`click`, {\n              bubbles: true,\n              cancelable: true,\n              view: window,\n            })\n          )\n        })\n        event.preventDefault()\n      }\n    } else {\n      if (ctrl && key == 'm') {\n        setHighlight(prev => !prev)\n        event.preventDefault()\n      } else if (ctrl && key === 'g') {\n        setShowGallery(prev => !prev)\n        event.preventDefault()\n      } else if (ctrl && key === 'd') {\n        // font download\n        let link = document.createElement('a')\n\n        // always save font at 2x\n\n        let a = aref.current\n        let temp = document.createElement('canvas')\n        temp.width = bcw * acols * 2\n        temp.height = bch * arows * 2\n\n        let tempx = temp.getContext('2d')\n        tempx.imageSmoothingEnabled = false\n        tempx.drawImage(a, 0, 0, temp.width, temp.height)\n\n        temp.toBlob(function(blob) {\n          link.setAttribute(\n            'download',\n            'face-font-' +\n              new Date()\n                .toISOString()\n                .slice(0, -4)\n                .replace(/-/g, '')\n                .replace(/:/g, '')\n                .replace(/_/g, '')\n                .replace(/\\./g, '') +\n              'Z' +\n              '.png'\n          )\n          link.setAttribute('href', URL.createObjectURL(blob))\n          link.dispatchEvent(\n            new MouseEvent(`click`, {\n              bubbles: true,\n              cancelable: true,\n              view: window,\n            })\n          )\n        })\n      } else if (ctrl && key === 'f') {\n        let input = document.createElement('input')\n        input.setAttribute('type', 'file')\n        input.dispatchEvent(\n          new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        )\n        function handleChange(e) {\n          for (let item of this.files) {\n            if (item.type.indexOf('image') < 0) {\n              continue\n            }\n            let src = URL.createObjectURL(item)\n            loadImage(src)\n          }\n          this.removeEventListener('change', handleChange)\n        }\n        input.addEventListener('change', handleChange)\n        event.preventDefault()\n      }\n    }\n\n    // shift = true\n    if (!ctrl && !meta) {\n      if (mode === 'text') {\n        if (key === 'Escape') {\n          setMode('font')\n        } else if (key === 'Backspace') {\n          tdispatch({ type: 'backspace', col_num: col_num })\n        } else if (key === 'ArrowLeft') {\n          if (shift) {\n            tdispatch({ type: 'highlight', payload: [-1, 0] })\n          } else {\n            tdispatch({ type: 'move_marker', payload: [-1, 0] })\n          }\n        } else if (key === 'ArrowRight') {\n          if (shift) {\n            tdispatch({ type: 'highlight', payload: [+1, 0] })\n          } else {\n            tdispatch({ type: 'move_marker', payload: [+1, 0] })\n          }\n        } else if (key === 'ArrowUp') {\n          if (shift) {\n            tdispatch({ type: 'highlight', payload: [0, -1] })\n          } else {\n            tdispatch({ type: 'move_marker', payload: [0, -1] })\n          }\n        } else if (key === 'ArrowDown') {\n          if (shift) {\n            tdispatch({ type: 'highlight', payload: [0, +1] })\n          } else {\n            tdispatch({ type: 'move_marker', payload: [0, +1] })\n          }\n        } else {\n          if (key.length === 1) {\n            tdispatch({ type: 'insert', col_num: col_num, payload: key })\n            if (key === ' ') event.preventDefault()\n          } else if (key === 'Enter') {\n            tdispatch({ type: 'insert', col_num: col_num, payload: '\\n' })\n          }\n        }\n      } else if (mode === 'font') {\n        if (key === 'Enter') {\n          setMode('char')\n        } else if (key === 't') {\n          setMode('text')\n        }\n        if (km['l']) {\n          let new_amark = amark + 1\n          if (new_amark > acel_num - 1) new_amark = acel_num - 1\n          setAmark(new_amark)\n        }\n        if (km['h']) {\n          let new_amark = amark - 1\n          if (new_amark < 0) new_amark = 0\n          setAmark(new_amark)\n        }\n        if (km['j'] || km['k']) {\n          let layout = [...Array(acel_num)].map((n, i) => [\n            i,\n            i % acols,\n            Math.floor(i / acols),\n          ])\n          let cell = layout[amark]\n          if (km['k']) {\n            let next = cell[2] - 1\n            if (next >= 0) {\n              let up_row = layout.filter(c => c[2] === next)\n              let new_amark = up_row[cell[1]]\n              if (new_amark === undefined) up_row[up_row.length - 1]\n              setAmark(new_amark[0])\n            }\n          }\n          if (km['j']) {\n            let next = cell[2] + 1\n            if (next <= layout[layout.length - 1][2]) {\n              let dn_row = layout.filter(c => c[2] === next)\n              let new_amark = dn_row[cell[1]]\n              if (new_amark === undefined) new_amark = dn_row[dn_row.length - 1]\n              setAmark(new_amark[0])\n            }\n          }\n        }\n      } else if (mode === 'char') {\n        if (key === 'Escape') {\n          setMode('font')\n        }\n        let movement = [0, 0]\n        if (km.j) {\n          movement[1] += 1 * scale\n        }\n        if (km.k) {\n          movement[1] -= 1 * scale\n        }\n        if (km.h) {\n          movement[0] -= 1 * scale\n        }\n        if (km.l) {\n          movement[0] += 1 * scale\n        }\n\n        let moved = [cmark[0] + movement[0], cmark[1] + movement[1]]\n        if (moved[0] < 0) moved[0] = 0\n        if (moved[0] > cw - scale) moved[0] = cw - scale\n        if (moved[1] < 0) moved[1] = 0\n        if (moved[1] > ch - scale) moved[1] = ch - scale\n        setCmark(moved)\n\n        // might want to move this into draw marker - there can be a delay\n        if (km.d) {\n          editChar('black', moved)\n        } else if (km.e) {\n          editChar('white', moved)\n        }\n      }\n    }\n  }\n\n  function editChar(fill, moved) {\n    let b = base_ref.current\n    let bx = b.getContext('2d')\n    let key = amark\n    let sprite_x = key % acols\n    let sprite_y = Math.floor(key / acols)\n    if (fill === 'white') {\n      bx.fillStyle = 'white'\n      bx.fillRect(\n        sprite_x * bcw + moved[0] / scale,\n        sprite_y * bch + moved[1] / scale,\n        1,\n        1\n      )\n    } else {\n      bx.fillStyle = 'black'\n      bx.fillRect(\n        sprite_x * bcw + moved[0] / scale,\n        sprite_y * bch + moved[1] / scale,\n        1,\n        1\n      )\n    }\n\n    drawAlphabet()\n    drawChar()\n    drawText()\n  }\n\n  function textDown(e) {\n    setMode('text')\n\n    let rect = e.target.getBoundingClientRect()\n    let rawx = e.clientX - rect.left - cw\n    let rawy = e.clientY - rect.top\n    let rowtarg = Math.floor(rawy / ch)\n    let coltarg = Math.round(rawx / cw)\n    let index\n    let in_row = tstate.text.filter(e => e[2] === rowtarg)\n    if (in_row.length === 0) {\n      index = tstate.text.length\n    } else {\n      let char = in_row[coltarg]\n      if (char === undefined) {\n        char = in_row[in_row.length - 1]\n      }\n      index = char[3]\n    }\n    tdispatch({ type: 'set_marker', payload: [index, index] })\n    setTextClicked(true)\n  }\n\n  function textMove(e) {\n    if (textClicked) {\n      let rect = e.target.getBoundingClientRect()\n      let rawx = e.clientX - rect.left - cw\n      let rawy = e.clientY - rect.top\n      let rowtarg = Math.floor(rawy / ch)\n      let coltarg = Math.round(rawx / cw)\n      let index\n      let in_row = tstate.text.filter(e => e[2] === rowtarg)\n      if (in_row.length === 0) {\n        index = tstate.text.length\n      } else {\n        let char = in_row[coltarg]\n        if (char === undefined) {\n          char = in_row[in_row.length - 1]\n        }\n        index = char[3]\n      }\n      tdispatch({ type: 'set_end_marker', payload: index })\n    }\n  }\n\n  function textUp(e) {\n    let rect = e.target.getBoundingClientRect()\n    let rawx = e.clientX - rect.left - cw\n    let rawy = e.clientY - rect.top\n    let rowtarg = Math.floor(rawy / ch)\n    let coltarg = Math.round(rawx / cw)\n    let index\n    let in_row = tstate.text.filter(e => e[2] === rowtarg)\n    if (in_row.length === 0) {\n      index = tstate.text.length\n    } else {\n      let char = in_row[coltarg]\n      if (char === undefined) {\n        char = in_row[in_row.length - 1]\n      }\n      index = char[3]\n    }\n    tdispatch({ type: 'set_end_marker', payload: index })\n    setTextClicked(false)\n  }\n\n  function copyHandler(e) {\n    let string = tstate.text.map(o => o[0]).join('')\n    let firsti = Math.min(...tstate.marker)\n    let lasti = Math.max(...tstate.marker)\n    let select = string.substr(firsti, lasti)\n    e.clipboardData.setData('text/plain', select)\n    event.preventDefault()\n  }\n\n  function cutHandler(e) {\n    let string = tstate.text.map(o => o[0]).join('')\n    let firsti = Math.min(...tstate.marker)\n    let lasti = Math.max(...tstate.marker)\n    let select = string.substr(firsti, lasti)\n    e.clipboardData.setData('text/plain', select)\n    tdispatch({ type: 'insert', col_num: col_num, payload: '' })\n    event.preventDefault()\n  }\n\n  function pasteHandler(e) {\n    let paste = (event.clipboardData || window.clipboardData).getData('text')\n    tdispatch({ type: 'insert', col_num: col_num, payload: paste })\n    event.preventDefault()\n  }\n\n  function downHandler(e) {\n    km_ref.current[e.key] = true\n    keyAction(e.key, e)\n  }\n  function upHandler(e) {\n    km_ref.current[e.key] = false\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler)\n    window.addEventListener('keyup', upHandler)\n    window.addEventListener('copy', copyHandler)\n    window.addEventListener('cut', cutHandler)\n    window.addEventListener('paste', pasteHandler)\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n      window.removeEventListener('copy', copyHandler)\n      window.removeEventListener('cut', cutHandler)\n      window.removeEventListener('paste', pasteHandler)\n    }\n  }, [mode, col_num, tstate, amark, cmark, show_gallery])\n\n  let scw = cw / scale\n  let sch = ch / scale\n\n  let title = 'Face'\n  let description =\n    'Face lets you edit both the text and the font it is rendered in.'\n\n  return (\n    <div>\n      <Head>\n        <meta charset=\"UTF-8\" />\n        <title>Face</title>\n        <link rel=\"shortcut icon\" href=\"/favicon.png\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width,initial-scale=1,shrink-to-fit=no\"\n        />\n        <meta name=\"theme-color\" content=\"#000000\" />\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta\n          property=\"og:image\"\n          content=\"https://face.constraint.systems/face.png\"\n        />\n        <meta property=\"og:url\" content=\"https://face.constraint.systems\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Head>\n\n      <Topstrip\n        cw={scw}\n        ch={sch}\n        scale={scale}\n        base={ui_ref.current}\n        ui_loaded={ui_loaded}\n        mode={mode}\n        keyTrigger={keyTrigger}\n      />\n\n      <div\n        style={{ display: 'flex', marginTop: sch / 2, marginBottom: sch / 2 }}\n      >\n        <div\n          style={{\n            position: 'relative',\n            marginRight: cw,\n          }}\n        >\n          <canvas width={'font'.length * scw} height={sch} ref={flref} />\n          <div\n            onMouseDown={() => {\n              setMode('font')\n            }}\n            style={{ position: 'relative' }}\n          >\n            <canvas\n              ref={aref}\n              style={{\n                position: 'relative',\n                outline: mode === 'font' ? 'solid 1px black' : 'none',\n              }}\n            />\n            <canvas\n              style={{\n                position: 'absolute',\n                mixBlendMode: 'difference',\n                left: 0,\n                top: 0,\n              }}\n              ref={amref}\n            />\n          </div>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <div style={{ position: 'relative' }}>\n            <canvas\n              width={'char'.length * scw}\n              height={ch / scale}\n              ref={clref}\n            />\n          </div>\n          <div style={{ position: 'relative' }}>\n            <canvas\n              ref={cref}\n              style={{\n                position: 'relative',\n                outline: mode === 'char' ? 'solid 1px black' : 'none',\n              }}\n            />\n            <canvas\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 0,\n              }}\n              ref={cmref}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          position: 'relative',\n          marginBottom: sch * 2,\n        }}\n      >\n        <div style={{ position: 'relative' }}>\n          <canvas\n            width={('text 100x100'.length * cw) / scale}\n            height={sch}\n            ref={tlref}\n          />\n        </div>\n        <div style={{ position: 'relative' }}>\n          <canvas\n            style={{\n              position: 'relative',\n              outline: mode === 'text' ? 'solid 1px black' : 'none',\n            }}\n            ref={tref}\n          />\n          <canvas\n            style={{\n              mixBlendMode: 'difference',\n              position: 'absolute',\n              left: -cw / 2,\n              top: 0,\n            }}\n            onMouseDown={textDown}\n            onMouseUp={textUp}\n            onMouseMove={textMove}\n            ref={mref}\n          />\n        </div>\n      </div>\n\n      <Bottomstrip\n        cw={bcw}\n        ch={bch}\n        base={ui_ref.current}\n        scale={scale}\n        ui_loaded={ui_loaded}\n        highlight={highlight}\n        mode={mode}\n        keyTrigger={keyTrigger}\n      />\n\n      {show_gallery ? (\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            overflow: 'auto',\n            background: 'rgba(220,220,220,0.8)',\n          }}\n        >\n          <div\n            style={{\n              background: '#efefef',\n              outline: 'solid 1px black',\n              overflow: 'hidden',\n            }}\n          >\n            <div style={{ marginBottom: bch }}>\n              <Titlebutton\n                base={ui_ref.current}\n                ui_loaded={ui_loaded}\n                keyTrigger={keyTrigger}\n                max_width={window.innerWidth}\n                content={[\n                  {\n                    type: 'text',\n                    content: 'font gallery:',\n                  },\n                  {\n                    type: 'button',\n                    key: 'Escape',\n                    key_label: 'Esc',\n                    label: 'exit',\n                  },\n                ]}\n              />\n            </div>\n            {gallery_data.map((f, i) => (\n              <div\n                style={{\n                  float: 'left',\n                  marginRight: bcw * 2,\n                  marginBottom: bch,\n                }}\n              >\n                <img src={'/font-library/' + f} />\n                <Titlebutton\n                  base={ui_ref.current}\n                  ui_loaded={ui_loaded}\n                  keyTrigger={keyTrigger}\n                  max_width={acols * cw}\n                  content={[\n                    {\n                      type: 'button',\n                      key: hotkey_labels[i],\n                      key_label: hotkey_labels[i],\n                      label: f,\n                    },\n                  ]}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : null}\n\n      <style global jsx>{`\n        html {\n          background: #efefef;\n          line-height: 0;\n        }\n        body {\n          padding: 0;\n          margin: 0;\n        }\n        img {\n          display: block;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AApHA;AAqHA;AACA;AACA;AAIA;AAEA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhzBA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AAWA;AACA;AACA;AAAA;AAcA;AACA;AACA;AAfA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAIA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAiBA;AAWA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AAHA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAcA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAYA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAUA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAnBA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAgaA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AApLA;AAAA;AAAA;AAgOA;AACA;AACA;;;;A","sourceRoot":""}